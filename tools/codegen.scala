// Generates Combine function for several instances of ValidatedNel
// see src/main/scala/com/danielasfregola/datavalidation/CombineArities.scala

def validations(i: Int) = (1 to i).map(n => s"v$n: Validation[T$n]").mkString(",")

def vals(i: Int) = (1 to i).map(n => s"v$n").mkString(",")

def fntype(i: Int) = s"(${types(i)}) => Z"

def types(i: Int) = (1 to i).map(n => s"T$n").mkString(",")

def combinefn(i: Int) = s"""
  /** Combine function for Validation[T] of arity ${i} */
  def combine[${types(i)},Z](${validations(i)})(f: ${fntype(i)}): Validation[Z] =
    Apply[Validation].map$i(${vals(i)})(f)
"""

println(
  args(0) match {
    case "Combine" =>

      s"""/**
Defines a combine function for several instances of ValidatedNel[E, _]

Autogenerated using tools/codegen.sh
*/
package com.danielasfregola.datavalidation

import cats.Apply
import cats.data.ValidatedNel

private[datavalidation] trait CombineArities[E]{

  type Validation[T] = ValidatedNel[E, T]

  ${2 to 22 map combinefn mkString ""}
}
 """
  }
)
