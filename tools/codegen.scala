// Generates Accumulate function for several instances of ValidatedNel
// see src/main/scala/app/validation/AccumulateArities.scala

def validations(i: Int) = (1 to i).map(n => s"v$n: Validation[T$n]").mkString(",")

def vals(i: Int) = (1 to i).map(n => s"v$n").mkString(",")

def fntype(i: Int) = s"(${types(i)}) => Z"

def types(i: Int) = (1 to i).map(n => s"T$n").mkString(",")

def accumulatefn(i: Int) = s"""
  /** Accumulate function for Validation[T] of arity ${i} */
  def accumulate[${types(i)},Z](${validations(i)})(f: ${fntype(i)}): Validation[Z] =
    Apply[Validation].map$i(${vals(i)})(f)
"""

println(
  args(0) match {
    case "Accumulate" =>

      s"""/**
Defines an accumulate function for several instances of ValidatedNel[E, _]

Autogenerated using tools/codegen.sh
*/
package app.validation

import cats.Apply

trait AccumulateArities {
  ${2 to 22 map accumulatefn mkString ""}
}
 """
  }
)
